name: Jekyll CI/CD (Native → Linode + CF purge + safety checks)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: jekyll-cicd
  cancel-in-progress: true

permissions:
  contents: read

env:
  RUBY_VERSION: "3.2"
  BUILD_DIR: _site

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      # If you use Node/Tailwind, uncomment:
      # - uses: actions/setup-node@v4
      #   with:
      #     node-version: 20
      # - run: npm ci && npm run build

      - name: Build site
        run: JEKYLL_ENV=production bundle exec jekyll build --future

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: ${{ env.BUILD_DIR }}

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: site
          path: ${{ env.BUILD_DIR }}

      - name: Install rsync, ssh, jq
        run: sudo apt-get update && sudo apt-get install -y rsync openssh-client jq

      - name: Write SSH private key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          install -m 700 -d ~/.ssh
          printf '%s\n' "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Trust remote host key
        env:
          LINODE_HOST: ${{ secrets.LINODE_HOST }}
          LINODE_PORT: ${{ secrets.LINODE_PORT }}
        run: |
          : "${LINODE_PORT:=22}"
          ssh-keyscan -p "$LINODE_PORT" "$LINODE_HOST" >> ~/.ssh/known_hosts

      # ---- SAFETY CHECK: ensure LINODE_PATH is sane before rsync --delete ----
      - name: "Safety check: validate target path"
        env:
          LINODE_PATH: ${{ secrets.LINODE_PATH }}
        run: |
          set -euo pipefail
          if [ -z "${LINODE_PATH:-}" ]; then
            echo "ERROR: LINODE_PATH is empty"; exit 1
          fi
          case "$LINODE_PATH" in
            /*) : ;;  # absolute path OK
            *) echo "ERROR: LINODE_PATH must be absolute, got '$LINODE_PATH'"; exit 1 ;;
          esac
          for bad in / /root /home; do
            if [ "$LINODE_PATH" = "$bad" ]; then
              echo "ERROR: Refusing to deploy to dangerous path: $LINODE_PATH"; exit 1
            fi
          done
          echo "Target path OK: $LINODE_PATH"

      - name: Ensure target exists & show ownership
        env:
          LINODE_USER: ${{ secrets.LINODE_USER }}
          LINODE_HOST: ${{ secrets.LINODE_HOST }}
          LINODE_PORT: ${{ secrets.LINODE_PORT }}
          LINODE_PATH: ${{ secrets.LINODE_PATH }}
        run: |
          : "${LINODE_PORT:=22}"
          ssh -p "${LINODE_PORT}" -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes \
            "${LINODE_USER}@${LINODE_HOST}" "mkdir -p '${LINODE_PATH}' && stat -c '%U:%G %n' '${LINODE_PATH}' || exit 1"

      - name: Deploy via rsync
        env:
          LINODE_USER: ${{ secrets.LINODE_USER }}
          LINODE_HOST: ${{ secrets.LINODE_HOST }}
          LINODE_PORT: ${{ secrets.LINODE_PORT }}
          LINODE_PATH: ${{ secrets.LINODE_PATH }}
        run: |
          : "${LINODE_PORT:=22}"
          rsync -az --delete \
            --chmod=Du=rwx,Dgo=rx,Fu=rw,Fgo=r \
            -e "ssh -p ${LINODE_PORT} -i ~/.ssh/id_ed25519" \
            "${{ env.BUILD_DIR }}/" "${LINODE_USER}@${LINODE_HOST}:${LINODE_PATH}/"

      # ---- Cloudflare cache purge (runs only if both secrets are set) ----
      - name: Purge Cloudflare cache (purge_everything)
        env:
          CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        if: ${{ env.CF_ZONE_ID != '' && env.CF_API_TOKEN != '' }}
        run: |
          set -euo pipefail
          echo "Purging Cloudflare cache for zone ${CF_ZONE_ID}…"
          RESP="$(curl -sS -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/purge_cache" \
                  -H "Authorization: Bearer ${CF_API_TOKEN}" \
                  -H "Content-Type: application/json" \
                  --data '{"purge_everything":true}')"
          echo "$RESP" | jq -r '.'
          echo "$RESP" | jq -e '.success == true' >/dev/null
